rename(proporcao = proporcao_ajustada)
# Ordem específica das tribos
ordem_tribos <- c(
"Brassolini", "Morphini", "Haeterini",
"Preponini", "Melanitini", "Anaeini",
"Epicaliini","Epiphilini", "Coeini",
"Satyrini",
"Callicorini", "Biblidini","Ageroniini"
)
# Cores correspondentes às tribos - BLINDSAFE colors (3 categorias de verde, 7 categorias de cinza e 3 categorias de marrom)
cores_tribos <- c(
"Brassolini" = "#35978f", "Morphini" = "#80cdc1", "Haeterini" = "#c7eae5",
"Preponini" = "gray65", "Melanitini" = "gray70", "Anaeini" = "gray75",
"Epicaliini" = "gray80", "Epiphilini" = "gray85", "Coeini" = "gray90",
"Satyrini" = "gray95",
"Callicorini" = "#f6e8c3", "Biblidini" = "#dfc27d","Ageroniini" = "#bf812d"
)
# Ajustar a ordem e as cores das tribos com base nas tribos presentes
cores_tribos <- cores_tribos[ordem_tribos]
# Assegurar que a coluna 'tribo_clean' respeite a ordem definida
dados_agregados$tribo <- factor(dados_agregados$tribo, levels = ordem_tribos)
# Criar um data frame com a frequência agregada por tribo
#frequencias_por_tribo_ano <- aggregate(frequencia ~ tribo + ano, dados_agregados, sum)
# Criar um data frame com a frequência agregada por tribo
frequencias_por_tribo_ano <- aggregate(frequencia ~ tribo, dados_agregados, sum)
# Criar uma função para determinar se um asterisco deve ser adicionado ao nome da tribo
adicionar_asterisco <- function(nome_tribo) {
# Verificar se existe alguma frequência igual a zero para essa tribo em qualquer ano
if (any(frequencias_por_tribo_ano$tribo == nome_tribo & frequencias_por_tribo_ano$frequencia == 0)) {
return(paste0(nome_tribo, "*"))
} else {
return(nome_tribo)
}
}
# Aplicar a função a cada tribo para criar o vetor de rótulos
labels_tribos <- sapply(ordem_tribos, adicionar_asterisco)
# Construir o gráfico
gg <- ggplot(dados_agregados) +
geom_bar(aes(x = ano, y = proporcao, fill = tribo), stat = "identity", position = position_stack(reverse = FALSE)) +
geom_text(data = total_individuos_por_ano, aes(x = ano, y = 100, label = total), vjust = -0.5, size = 3, hjust = 0.5)+
scale_y_continuous(labels = scales::number_format(scale = 1, accuracy = 1), limits = c(0, 100))+
scale_x_discrete(expand = c(0, 0)) +
scale_fill_manual(values = cores_tribos,
labels = labels_tribos,
breaks = ordem_tribos) +
labs(title = titulo,
x = "Ano",
y = "Frequência relativa de ocorrência (%)",
fill = "Tribo") +
theme_minimal() +
theme(legend.position = "right",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
plot.title = element_text(hjust = 0.5, size = 16),
plot.subtitle = element_text(hjust = 0.5, size = 14),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12),
axis.line = element_line(colour = "gray40"),
axis.line.x = element_blank()) +
guides(fill = guide_legend(title = "Tribos", reverse = FALSE))
# Exibir o gráfico
print(gg)
}
# Carregar e preparar os dados
resultado_final<-read.csv("data/resultado_final.csv", header=T)
resultado_final$ano <- factor(resultado_final$ano)
resultado_final$tribo <- gsub("\\*", "", resultado_final$tribo)
#resultado_final <- resultado_final[resultado_final$ano != "2023", ]
# Obter todas as UC's do bioma Cerrado
biomas <- unique(resultado_final$bioma[resultado_final$bioma == "Mata_Atlantica"])
# Aplicar a função
graficos<-lapply(biomas, function(bioma) gerar_grafico_por_bioma(resultado_final, bioma))
gerar_grafico_por_bioma(resultado_final, biomas)
#-----------------------
# # Função auxiliar para ajustar o título
# ajustar_titulo <- function(titulo) {
#   palavras <- strsplit(titulo, " ")[[1]]
#
#   # Palavras que necessitam de correção de acentuação
#   correcoes <- list(
#     "mata_atlantica" = "Mata Atlântica")
#
# }
#
# # Função para gerar o gráfico para cada unidade de conservação
# gerar_grafico_por_bioma <- function(dados, nome_bioma) {
#   # Preparar o título com as novas regras
#   titulo <- gsub("_", " ", nome_bioma)
#   titulo <- ajustar_titulo(titulo)  # Utilizando a função de ajuste de título aqui
#
#   # Filtrar os dados para a unidade de conservação atual
#   dados_bioma <- subset(dados, bioma == nome_bioma & bioma == "Mata_Atlantica")
#   dados_bioma <- dados_bioma[!is.na(dados_bioma$tribo), ] #tirar os dados 'NA' que estão na tribo
#
#   # Calcular o total de indivíduos por ano para a região atual
#   total_individuos_por_ano <- dados_bioma %>%
#     group_by(ano) %>%
#     summarise(total = sum(soma_individuos), .groups = 'drop')
#
#   # Agregar dados por ano e tribo
#   dados_agregados <- dados_bioma %>%
#     group_by(ano, tribo) %>%
#     summarize(frequencia = sum(soma_individuos), .groups = 'drop')
#
#   # Calcular totais e proporções
#   total_por_ano <- dados_agregados %>%
#     group_by(ano) %>%
#     summarize(total = sum(frequencia), .groups = 'drop')
#
#   dados_agregados <- left_join(dados_agregados, total_por_ano, by = "ano") %>%
#     mutate(proporcao = frequencia / total * 100)
#
#   # Ajustar proporções
#   dados_agregados <- dados_agregados %>%
#     group_by(ano) %>%
#     mutate(diferenca = 100 - sum(proporcao),
#            proporcao_ajustada = ifelse(proporcao == max(proporcao), proporcao + diferenca, proporcao)) %>%
#     ungroup() %>%
#     dplyr::select(-diferenca, -proporcao) %>%
#     rename(proporcao = proporcao_ajustada)
#
#   # Ordem específica das tribos
#   ordem_tribos <- c(
#     "Brassolini", "Morphini", "Haeterini",
#     "Satyrini", "Coeini", "Epiphilini",
#     "Epicaliini", "Anaeini", "Melanitini",
#     "Preponini", "Callicorini", "Biblidini",
#     "Ageroniini"
#   )
#
#   # Cores correspondentes às tribos - BLINDSAFE colors (3 categorias de verde, 7 categorias de cinza e 3 categorias de marrom)
#   cores_tribos <- c(
#     "Brassolini" = "#35978f", "Morphini" = "#80cdc1", "Haeterini" = "#c7eae5",
#     "Satyrini" = "gray95", "Coeini" = "gray90", "Epiphilini" = "gray85",
#     "Epicaliini" = "gray80", "Anaeini" = "gray75", "Melanitini" = "gray70",
#     "Preponini" = "gray65", "Callicorini" = "#f6e8c3", "Biblidini" = "#dfc27d",
#     "Ageroniini" = "#bf812d"
#   )
#
#   # Ajustar a ordem e as cores das tribos com base nas tribos presentes
#   cores_tribos <- cores_tribos[ordem_tribos]
#
#   # Assegurar que a coluna 'tribo_clean' respeite a ordem definida
#   dados_agregados$tribo <- factor(dados_agregados$tribo, levels = ordem_tribos)
#
#   # Criar um data frame com a frequência agregada por tribo
#   #frequencias_por_tribo_ano <- aggregate(frequencia ~ tribo + ano, dados_agregados, sum)
#
#   # Criar um data frame com a frequência agregada por tribo
#   frequencias_por_tribo_ano <- aggregate(frequencia ~ tribo, dados_agregados, sum)
#
#   # Criar uma função para determinar se um asterisco deve ser adicionado ao nome da tribo
#   adicionar_asterisco <- function(nome_tribo) {
#     # Verificar se existe alguma frequência igual a zero para essa tribo em qualquer ano
#     if (any(frequencias_por_tribo_ano$tribo == nome_tribo & frequencias_por_tribo_ano$frequencia == 0)) {
#       return(paste0(nome_tribo, "*"))
#     } else {
#       return(nome_tribo)
#     }
#   }
#
#   # Aplicar a função a cada tribo para criar o vetor de rótulos
#   labels_tribos <- sapply(ordem_tribos, adicionar_asterisco)
#
#   # Construir o gráfico
#   gg <- ggplot(dados_agregados) +
#     geom_bar(aes(x = ano, y = proporcao, fill = tribo), stat = "identity", position = position_stack(reverse = FALSE)) +
#     geom_text(data = total_individuos_por_ano, aes(x = ano, y = 100, label = total), vjust = -0.5, size = 3, hjust = 0.5)+
#     scale_y_continuous(labels = scales::number_format(scale = 1, accuracy = 1), limits = c(0, 100))+
#     scale_x_discrete(expand = c(0, 0)) +
#     scale_fill_manual(values = cores_tribos,
#                       labels = labels_tribos,
#                       breaks = ordem_tribos) +
#     labs(title = titulo,
#          x = "Ano",
#          y = "Proporção relativa de ocorrência (%)",
#          fill = "Tribo") +
#     theme_minimal() +
#     theme(legend.position = "right",
#           legend.title = element_text(size = 12),
#           legend.text = element_text(size = 10),
#           plot.title = element_text(hjust = 0.5, size = 16),
#           plot.subtitle = element_text(hjust = 0.5, size = 14),
#           axis.text = element_text(size = 12),
#           axis.title = element_text(size = 12),
#           axis.line = element_line(colour = "gray40"),
#           axis.line.x = element_blank()) +
#     guides(fill = guide_legend(title = "Tribos", reverse = FALSE))
#
#
#   # Exibir o gráfico
#   print(gg)
# }
#
# # Carregar e preparar os dados
# resultado_final<-read.csv("data/resultado_final.csv")
# resultado_final$ano <- factor(resultado_final$ano)
# resultado_final$tribo <- gsub("\\*", "", resultado_final$tribo)
# #resultado_final <- resultado_final[resultado_final$ano != "2023", ]
#
# # Obter todas as UC's do bioma Cerrado
# biomas <- unique(resultado_final$bioma[resultado_final$bioma == "Mata_Atlantica"])
#
# # Aplicar a função
# #lapply(biomas, function(bioma) gerar_grafico_por_bioma(resultado_final, bioma))
#
# gerar_grafico_por_bioma(resultado_final, biomas)
#| label: fig-regiao-mata-atlantica
#| echo: false
#| message: false
#| warning: false
#| cache: true
#| fig.pos: 'H'
#| out.width: '70%'
#| fig-cap: "Padrões de bandas de abundância relativa de tribos de borboletas frugívoras para o período de 2015 a 2022 no bioma Mata Atlântica. Números de indivíduos amostrados são indicados sobre as barras verticais."
##### Gráficos de dados Borboletas - Protocolo básico - Mata Atlantica
### Tribos com asterisco estão ausentes no gráfico
## Script: Isabela Freitas Oliveira
# Definir o diretório de trabalho
#setwd("~/Documents/ICMBIO-COMOB/Dados_Monitora/Análise de dados/Monitora_Borboletas_Isabela")
# Função auxiliar para ajustar o título
ajustar_titulo <- function(titulo) {
palavras <- strsplit(titulo, " ")[[1]]
# Palavras que necessitam de correção de acentuação
correcoes <- list(
"Mata_Atlantica" = "Mata Atlântica")
}
# Função para gerar o gráfico para cada unidade de conservação
gerar_grafico_por_bioma <- function(dados, nome_bioma) {
# Preparar o título com as novas regras
titulo <- gsub("_", " ", nome_bioma)
titulo <- ajustar_titulo(titulo)  # Utilizando a função de ajuste de título aqui
# Filtrar os dados para a unidade de conservação atual
dados_bioma <- subset(dados, bioma == nome_bioma & bioma == "Mata_Atlantica")
dados_bioma <- dados_bioma[!is.na(dados_bioma$tribo), ] #tirar os dados 'NA' que estão na tribo
# Calcular o total de indivíduos por ano para a região atual
total_individuos_por_ano <- dados_bioma %>%
group_by(ano) %>%
summarise(total = sum(soma_individuos), .groups = 'drop')
# Agregar dados por ano e tribo
dados_agregados <- dados_bioma %>%
group_by(ano, tribo) %>%
summarize(frequencia = sum(soma_individuos), .groups = 'drop')
# Calcular totais e proporções
total_por_ano <- dados_agregados %>%
group_by(ano) %>%
summarize(total = sum(frequencia), .groups = 'drop')
dados_agregados <- left_join(dados_agregados, total_por_ano, by = "ano") %>%
mutate(proporcao = frequencia / total * 100)
# Ajustar proporções
dados_agregados <- dados_agregados %>%
group_by(ano) %>%
mutate(diferenca = 100 - sum(proporcao),
proporcao_ajustada = ifelse(proporcao == max(proporcao), proporcao + diferenca, proporcao)) %>%
ungroup() %>%
dplyr::select(-diferenca, -proporcao) %>%
rename(proporcao = proporcao_ajustada)
# Ordem específica das tribos
ordem_tribos <- c(
"Brassolini", "Morphini", "Haeterini",
"Preponini", "Melanitini", "Anaeini",
"Epicaliini","Epiphilini", "Coeini",
"Satyrini",
"Callicorini", "Biblidini","Ageroniini"
)
# Cores correspondentes às tribos - BLINDSAFE colors (3 categorias de verde, 7 categorias de cinza e 3 categorias de marrom)
cores_tribos <- c(
"Brassolini" = "#35978f", "Morphini" = "#80cdc1", "Haeterini" = "#c7eae5",
"Preponini" = "gray65", "Melanitini" = "gray70", "Anaeini" = "gray75",
"Epicaliini" = "gray80", "Epiphilini" = "gray85", "Coeini" = "gray90",
"Satyrini" = "gray95",
"Callicorini" = "#f6e8c3", "Biblidini" = "#dfc27d","Ageroniini" = "#bf812d"
)
# Ajustar a ordem e as cores das tribos com base nas tribos presentes
cores_tribos <- cores_tribos[ordem_tribos]
# Assegurar que a coluna 'tribo_clean' respeite a ordem definida
dados_agregados$tribo <- factor(dados_agregados$tribo, levels = ordem_tribos)
# Criar um data frame com a frequência agregada por tribo
#frequencias_por_tribo_ano <- aggregate(frequencia ~ tribo + ano, dados_agregados, sum)
# Criar um data frame com a frequência agregada por tribo
frequencias_por_tribo_ano <- aggregate(frequencia ~ tribo, dados_agregados, sum)
# Criar uma função para determinar se um asterisco deve ser adicionado ao nome da tribo
adicionar_asterisco <- function(nome_tribo) {
# Verificar se existe alguma frequência igual a zero para essa tribo em qualquer ano
if (any(frequencias_por_tribo_ano$tribo == nome_tribo & frequencias_por_tribo_ano$frequencia == 0)) {
return(paste0(nome_tribo, "*"))
} else {
return(nome_tribo)
}
}
# Aplicar a função a cada tribo para criar o vetor de rótulos
labels_tribos <- sapply(ordem_tribos, adicionar_asterisco)
# Construir o gráfico
gg <- ggplot(dados_agregados) +
geom_bar(aes(x = ano, y = proporcao, fill = tribo), stat = "identity", position = position_stack(reverse = FALSE)) +
geom_text(data = total_individuos_por_ano, aes(x = ano, y = 100, label = total), vjust = -0.5, size = 3, hjust = 0.5)+
scale_y_continuous(labels = scales::number_format(scale = 1, accuracy = 1), limits = c(0, 100))+
scale_x_discrete(expand = c(0, 0)) +
scale_fill_manual(values = cores_tribos,
labels = labels_tribos,
breaks = ordem_tribos) +
labs(title = titulo,
x = "Ano",
y = "Frequência relativa de ocorrência (%)",
fill = "Tribo") +
theme_minimal() +
theme(legend.position = "right",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
plot.title = element_text(hjust = 0.5, size = 16),
plot.subtitle = element_text(hjust = 0.5, size = 14),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12),
axis.line = element_line(colour = "gray40"),
axis.line.x = element_blank()) +
guides(fill = guide_legend(title = "Tribos", reverse = FALSE))
# Exibir o gráfico
print(gg)
}
# Carregar e preparar os dados
resultado_final<-read.csv("data/resultado_final.csv", header=T)
resultado_final$ano <- factor(resultado_final$ano)
resultado_final$tribo <- gsub("\\*", "", resultado_final$tribo)
#resultado_final <- resultado_final[resultado_final$ano != "2023", ]
# Obter todas as UC's do bioma Cerrado
biomas <- unique(resultado_final$bioma[resultado_final$bioma == "Mata_Atlantica"])
# Aplicar a função
#graficos<-lapply(biomas, function(bioma) gerar_grafico_por_bioma(resultado_final, bioma))
gerar_grafico_por_bioma(resultado_final, biomas)
#| label: fig-taxa-encontro-mapa
#| echo: false
#| message: false
#| warning: false
#| cache: true
#| fig.pos: 'H'
#| fig.align: 'center'
#| out.width: '70%'
#| fig-cap: "Distribuição espacial das taxas médias de avistamento de mamíferos e aves (taxa geral, considerando conjuntamente os dois grupos) registradas nas unidades de conservação do Programa Monitora de 2014 a 2022."
backg <- htmltools::tags$style(".leaflet-container { background: white; }" )
colours_red <- colorNumeric(palette = "Reds", domain = NULL)
mapa <- leaflet(ucs_comp_florestal_unido) |>
#Base groups
setView(lng = -58, lat = -14,
zoom = 4) %>%
#addProviderTiles(providers$Stamen.TonerLite, group = "Stamen Toner Lite") %>%
# addProviderTiles(providers$OpenStreetMap.Mapnik, group = "Open Street Map") %>%
addProviderTiles(providers$Esri.WorldImagery, group = "Imágenes de ESRI") %>%
# addProviderTiles(providers$Esri.NatGeoWorldMap, group = "Esri.NatGeoWorldMap") %>%
# addPolygons(data = brasil, weight = 0.3,
#             color = "black",
#             fillColor = "white") |>
addPolygons(data = brasil_regioes, weight = 0.3,
color = "black",
fillColor = "white") |>
addPolygons(data = ucs_comp_florestal_unido,
fillColor = ~ colours_red(ucs_comp_florestal_unido$taxa_enc_media),
fillOpacity = 1,
weight = 0.3,
color = "black",
popup = paste("Nome: ", ucs_comp_florestal_unido$uc, "<br>",
"Bioma: ", ucs_comp_florestal_unido$BiomaCRL, "<br>",
"Taxa de avistamento: ", ucs_comp_florestal_unido$taxa_enc_media, "<br>")) |>
htmlwidgets::prependContent(backg) |>
addLegend(
pal = colours_red,
values = ~ ucs_comp_florestal_unido$taxa_enc_media,
title = "Taxa de avistamento",
position = "bottomleft"
) |>
# Layers Control
addLayersControl(
baseGroups = c(#"StamenTonerLite",
"Imágenes de ESRI",
"Open Street Map"),
position = "topright")
mapa
#| label: fig-taxa-encontro-mapa
#| echo: false
#| message: false
#| warning: false
#| cache: true
#| fig.pos: 'H'
#| fig-align: center
#| out.width: '70%'
#| fig-cap: "Distribuição espacial das taxas médias de avistamento de mamíferos e aves (taxa geral, considerando conjuntamente os dois grupos) registradas nas unidades de conservação do Programa Monitora de 2014 a 2022."
backg <- htmltools::tags$style(".leaflet-container { background: white; }" )
colours_red <- colorNumeric(palette = "Reds", domain = NULL)
mapa <- leaflet(ucs_comp_florestal_unido) |>
#Base groups
setView(lng = -58, lat = -14,
zoom = 4) %>%
#addProviderTiles(providers$Stamen.TonerLite, group = "Stamen Toner Lite") %>%
# addProviderTiles(providers$OpenStreetMap.Mapnik, group = "Open Street Map") %>%
addProviderTiles(providers$Esri.WorldImagery, group = "Imágenes de ESRI") %>%
# addProviderTiles(providers$Esri.NatGeoWorldMap, group = "Esri.NatGeoWorldMap") %>%
# addPolygons(data = brasil, weight = 0.3,
#             color = "black",
#             fillColor = "white") |>
addPolygons(data = brasil_regioes, weight = 0.3,
color = "black",
fillColor = "white") |>
addPolygons(data = ucs_comp_florestal_unido,
fillColor = ~ colours_red(ucs_comp_florestal_unido$taxa_enc_media),
fillOpacity = 1,
weight = 0.3,
color = "black",
popup = paste("Nome: ", ucs_comp_florestal_unido$uc, "<br>",
"Bioma: ", ucs_comp_florestal_unido$BiomaCRL, "<br>",
"Taxa de avistamento: ", ucs_comp_florestal_unido$taxa_enc_media, "<br>")) |>
htmlwidgets::prependContent(backg) |>
addLegend(
pal = colours_red,
values = ~ ucs_comp_florestal_unido$taxa_enc_media,
title = "Taxa de avistamento",
position = "bottomleft"
) |>
# Layers Control
addLayersControl(
baseGroups = c(#"StamenTonerLite",
"Imágenes de ESRI",
"Open Street Map"),
position = "topright")
mapa
ortalis <- masto_aves |>
filter(classe == "Aves" & uc %in% c("Esec Terra do Meio", "Parna da Serra do Pardo", "Rebio do Tapurapé", "Resex Renascer", "Resex Riozinho do Anfrísio", "Resex Verde para Sempre", "Resex Iriri"))
View(masto_aves)
ortalis <- masto_aves |>
filter(classe == "Aves" & uc %in% uc == c("Esec Terra do Meio", "Parna da Serra do Pardo", "Rebio do Tapurapé", "Resex Renascer", "Resex Riozinho do Anfrísio", "Resex Verde para Sempre", "Resex Iriri"))
ortalis <- masto_aves |>
filter(classe == "Ave" & uc %in% uc == c("Esec Terra do Meio", "Parna da Serra do Pardo", "Rebio do Tapurapé", "Resex Renascer", "Resex Riozinho do Anfrísio", "Resex Verde para Sempre", "Resex Iriri"))
ortalis <- masto_aves |>
filter(classe == "Aves")
View(masto_aves)
ortalis <- masto_aves |>
filter(classe == "Aves")
ortalis <- masto_aves %>%
filter(classe == "Aves")
library(tidyverse)
library(data.table)
library(descr)
library(RColorBrewer)
library(kableExtra)
library(knitr)
library(DT)
library(plotly)
library(ggthemes)
library(forcats)
library(leaflet)
library(sf)
library(rgdal)
library(treemapify)
library(reshape2)
library(randomcoloR)
library(gridExtra)
library(here)
library(tidyverse)
library(data.table)
library(descr)
library(RColorBrewer)
library(kableExtra)
library(knitr)
library(DT)
library(plotly)
library(ggthemes)
library(forcats)
library(leaflet)
library(sf)
library(rgdal)
library(treemapify)
library(reshape2)
library(randomcoloR)
library(gridExtra)
library(here)
ortalis <- masto_aves %>%
filter(classe == "Aves")
ortalis <- masto_aves %>%
filter(classe == "Aves" & uc %in% c("Esec Terra do Meio", "Parna da Serra do Pardo", "Rebio do Tapurapé", "Resex Renascer", "Resex Riozinho do Anfrísio", "Resex Verde para Sempre", "Resex Iriri"))
unique(ortalis$taxon_validado)
motmot <- ortalis |>
filter(taxon_validado == "Ortalis motmot")
unique(motmot$uc)
ortalis <- masto_aves %>%
filter(classe == "Aves" & uc %in% c("Esec Terra do Meio", "Parna da Serra do Pardo", "Rebio do Tapirapé", "Resex Renascer", "Resex Riozinho do Anfrísio", "Resex Verde para Sempre", "Resex Iriri"))
motmot <- ortalis |>
filter(taxon_validado == "Ortalis motmot")
unique(motmot$uc)
motmot <- masto_aves |>
filter(taxon_validado == "Ortalis motmot")
unique(motmot$uc)
motmot <- masto_aves |>
filter(taxon_validado == "Ortalis motmot")
unique(motmot$uc)
unique(masto_aves$uc)
masto_aves <- masto_aves %>%
mutate(
taxon_validado = case_when(
uc == "Esec da Terra do Meio" & taxon_validado == "Ortalis motmot" ~ "Ortalis ruficeps",
uc == "Parna da Serra do Pardo" & taxon_validado == "Ortalis motmot" ~ "Ortalis ruficeps",
uc == "Rebio do Tapirapé" & taxon_validado == "Ortalis motmot" ~ "Ortalis ruficeps",
uc == "Resex Renascer" & taxon_validado == "Ortalis motmot" ~ "Ortalis ruficeps",
uc == "Resex Riozinho do Anfrísio" & taxon_validado == "Ortalis motmot" ~ "Ortalis ruficeps",
uc == "Resex Verde para Sempre" & taxon_validado == "Ortalis motmot" ~ "Ortalis ruficeps",
TRUE ~ taxon_validado))
motmot <- masto_aves |>
filter(taxon_validado == "Ortalis motmot")
unique(motmot$uc)
ruficeps <- masto_aves |>
filter(taxon_validado == "Ortalis ruficeps")
unique(ruficeps$uc)
aves1 <- masto_aves |>
filter(classe == "Aves")
unique(aves1$taxon_validado)
