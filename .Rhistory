axis.text.y = element_text(size = 11),
axis.title.y = element_text(size = 11, margin = margin(r = 10)),
axis.title.x = element_text(size = 11, margin = margin(t = 10)),
#axis.line.y = element_line(),
#axis.ticks.y = element_line(),
title = element_text(size = 10),
legend.text=element_text(size=10),
legend.position = "right",
legend.title = element_blank()) +
scale_color_manual(values = cor_ameacadas1) +
scale_y_continuous(limits = c(0, 1.5)) +
scale_x_continuous(breaks = taxa_encontro_spp_ameacadas$ano) +
labs(title = "Outros Primatas",
x = "Ano",
y = "Avistamentos/10 km",
col = NULL)
G_especie_ameacada_ucs_ano_media_outros_primatas
# ggsave("imagens/cap05/G_especie_ameacada_ucs_ano_media_outros_primatas.png", height = 4.5, width = 6, units = "in", dpi = 300)
#| label: fig-especies-ameacadas-tamandua
#| echo: false
#| message: false
#| warning: false
#| cache: true
#| fig.pos: 'H'
#| out.width: '70%'
#| fig-cap: "Taxas médias de avistamento estimadas por ano para a espécie ameaçada tamanduá-bandeira (*Myrmecophaga tridactyla*). Os pontos representam valores médios obtidos a partir das taxas registradas para diferentes unidades de conservação. As barras de variação e o número de registros para cada ano não são apresentados para maior clareza da figura."
cor_ameacadas3 <- c("cyan4")
G_especie_ameacada_ucs_ano_media_tamandua <- taxa_encontro_spp_ameacadas |>
group_by(ano, classe, ordem, taxon_validado, categoria) |>
filter(taxon_validado %in% c("Myrmecophaga tridactyla")) |>
summarise(n = n(),
taxa_enc_media = mean(taxa_encontro),
sd = sd(taxa_encontro),
ep = sd / sqrt(n),
IC_95 = qnorm(.975) * ep) |>
ggplot(aes(
x = ano,
y = taxa_enc_media, color = taxon_validado, shape = categoria)) +
# geom_errorbar(
#   aes(ymin = taxa_enc_media - IC_95, ymax = taxa_enc_media + IC_95),
#   size = 0.8,
#   linewidth = 0.5,
#   width = 0.1,
#   colour = "cyan4") +
geom_line(size = 0.5) +
geom_point(size = 3, alpha = 0.8) +
theme_minimal() +
theme(
panel.grid.minor.y = element_blank(),
#panel.grid.major.y = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank(),
axis.text=element_text(size=10),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 11),
axis.title.y = element_text(size = 11, margin = margin(r = 10)),
axis.title.x = element_text(size = 11, margin = margin(t = 10)),
#axis.line.y = element_line(),
#axis.ticks.y = element_line(),
title = element_text(size = 10),
legend.text=element_text(size=10),
legend.position = "right",
legend.title = element_blank()) +
scale_color_manual(values = cor_ameacadas3) +
scale_y_continuous(limits = c(0, 0.5)) +
scale_x_continuous(breaks = taxa_encontro_spp_ameacadas$ano) +
labs(title = "Outros mamíferos",
x = "Ano",
y = "Avistamentos/10 km",
col = NULL)
G_especie_ameacada_ucs_ano_media_tamandua
# ggsave("imagens/cap05/G_especie_ameacada_ucs_ano_media_tamandua.png", height = 4.5, width = 6, units = "in", dpi = 300)
#| label: fig-especies-ameacadas-aves
#| echo: false
#| message: false
#| warning: false
#| cache: true
#| fig.pos: 'H'
#| out.width: '70%'
#| fig-cap: "Taxas médias de avistamento estimadas por ano para cinco espécies de aves ameaçadas. Os pontos representam valores médios obtidos a partir das taxas registradas para diferentes unidades de conservação. As barras de variação e o número de registros para cada ano não são apresentados para maior clareza da figura. "
cor_ameacadas1 <- c("#008B8B", "#70C4C4", "#666666", "#BF8120", "brown")
G_especie_ameacada_ucs_ano_media_aves_selecionadas <- taxa_encontro_spp_ameacadas |>
group_by(ano, classe, ordem, taxon_validado, categoria) |>
filter(taxon_validado %in% c("Aburria cujubi", "Psophia obscura", "Psophia dextralis", "Psophia interjecta", "Psophia viridis")) |>
summarise(n = n(),
taxa_enc_media = mean(taxa_encontro),
sd = sd(taxa_encontro),
ep = sd / sqrt(n),
IC_95 = qnorm(.975) * ep) |>
ggplot(aes(
x = ano,
y = taxa_enc_media, color = taxon_validado, shape = categoria)) +
# geom_errorbar(
#   aes(ymin = taxa_enc_media - IC_95, ymax = taxa_enc_media + IC_95),
#   size = 0.8,
#   linewidth = 0.5,
#   width = 0.1,
#   colour = "cyan4") +
geom_line(size = 0.5) +
geom_point(size = 3, alpha = 0.8) +
theme_minimal() +
theme(
panel.grid.minor.y = element_blank(),
#panel.grid.major.y = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank(),
axis.text=element_text(size=10),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 11),
axis.title.y = element_text(size = 11, margin = margin(r = 10)),
axis.title.x = element_text(size = 11, margin = margin(t = 10)),
#axis.line.y = element_line(),
#axis.ticks.y = element_line(),
title = element_text(size = 10),
legend.text=element_text(size=10),
legend.position = "right",
legend.title = element_blank()) +
scale_color_manual(values = cor_ameacadas1) +
scale_y_continuous(limits = c(0, 1.5)) +
scale_x_continuous(breaks = taxa_encontro_spp_ameacadas$ano) +
labs(title = "Aves ameaçadas",
x = "Ano",
y = "Avistamentos/10 km",
col = NULL)
G_especie_ameacada_ucs_ano_media_aves_selecionadas
# ggsave("imagens/cap05/G_especie_ameacada_ucs_ano_media_aves_selecionadas.png", height = 4.5, width = 6, units = "in", dpi = 300)
#| label: fig-media-geometrica
#| echo: false
#| message: false
#| warning: false
#| cache: true
#| fig.pos: 'H'
#| out.width: '70%'
#| fig-cap: "Média geométrica das estimativas de abundãncia relativa para 160 populações monitoradas. A linha branca escura corresponde aos valores médios; as faixas azuladasombreadas, ao intervalo de confiança de 90 e 95%."
knitr::include_graphics("imagens/cap05/ma_media_geometrica.JPG")
#| label: fig-taxons-acumulados-script
#| echo: false
#| message: false
#| warning: false
#| cache: true
#| fig.pos: 'H'
#| out.width: '85%'
#| fig-cap: "Táxons registrados acumulados e número de unidades de conservação com protocolo básico de masto-aves executado por ano entre 2014 e 2022."
#----- grafico com numero de UCs ativas e numero acumulado de encontros por ano
monitora %>%
filter(ano != 2023) %>%
distinct(bioma, uc, ano, ea, data, esforco) %>%
group_by(bioma, ano) %>%
summarise(esforco_anual = sum(esforco),
ucs = n_distinct(uc)) %>%
left_join(monitora %>%
arrange(ano) %>%
distinct(taxon_validado, .keep_all = TRUE) %>%
group_by(bioma, ano) %>%
count() %>%
ungroup() %>%
rename(taxa_registrados = n),
by = c("bioma", "ano")) %>%
mutate(taxon_acumulado = cumsum(taxa_registrados)) %>%
relocate(taxon_acumulado, .after = esforco_anual) %>%
mutate(taxon_acumulado = case_when(is.na(taxon_acumulado) ~ max(taxon_acumulado, na.rm = TRUE),
.default = taxon_acumulado)) %>%
ggplot(aes(x=ano)) +
geom_bar(aes(y = ucs*10), stat = "identity",
fill = "cyan4", colour = "cyan4") +
geom_line(aes(y = taxon_acumulado), stat = "identity", colour = "#95D8D8", linewidth = 0.8) +
scale_y_continuous(
name = "Taxa validados (acumulado)",  # features of first axis
sec.axis = sec_axis(~.*0.1, name="Número de UCs"), # add second axis and specify its features
expand = c(0, 0)
) +
scale_x_continuous(breaks = seq(2014, 2022, 2)) +
theme_classic() +
theme(strip.text.x = element_text(size = 12)) +
theme(strip.background = element_blank()) +
theme(axis.text.x = element_text(size = 8)) +
theme(axis.text.y = element_text(size = 8)) +
facet_wrap(~ bioma, scales = "free") +
# theme(aspect.ratio = 3/4,  # Ajustar o painel para uma relação 3/4 laltura/largura
#   plot.background = element_rect(fill = "white")) +
labs(x = "Ano")
ggsave("imagens/cap05/ma_ucs_ativas_taxa_acumulado1.jpg",
plot = last_plot(),
device =  "jpeg",
scale=1.5,
width = 210,
height = 70,
units = "mm",
dpi = 120)
#| label: fig-esforco-acumulado-script
#| echo: false
#| message: false
#| warning: false
#| cache: true
#| fig.pos: 'H'
#| out.width: '50%'
#| fig-cap: "Esforço por ano e acumulado em quilômetros percorridos nas unidades de conservação integrantes do Programa Monitora no período de 2014 a 2022."
# scripts para produzir 3 graficos para o relatorio florestal
# Elildo Carvalho Jr & Marcos Fialho
# Obs 1: outros graficos produzidos anteriormente (incluindo taxas de crescimento de populacoes,
# media geometrica das tendencias etc ja foram entregues, Rmarkdown para gera-los esta em outro arquivo
library(here)
library(tidyverse)
library(RColorBrewer)
#-----------3 graficos para o relatorio florestal-------------------
#----- ler dados
load(here("data", "monitora.RData"))
#----- grafico de esforco anual e acumulado por bioma
monitora %>%
filter(ano != 2023) %>%
distinct(bioma, uc, ano, ea, data, esforco) %>%
group_by(bioma, ano) %>%
summarise(esforco_anual = sum(esforco),
ucs = n_distinct(uc),
taxa = n()/esforco_anual) %>%
mutate(esf_acumulado = cumsum(esforco_anual)) %>%
relocate(esf_acumulado, .after = esforco_anual) %>%
ggplot(aes(x=ano)) +
geom_line(aes(y = esf_acumulado), colour = "cyan4", linewidth = 1) +
geom_line(aes(y = esforco_anual), colour = "#BF8120", linewidth = 1) +
ylab("Esforço (km)") +
xlab("") +
theme_classic() +
#scale_y_continuous(limits = c(0, NA), expand = c(0, 0)) +
theme(strip.text.x = element_text(size = 12)) +
theme(strip.background = element_blank()) +
theme(axis.text.x = element_text(size = 8)) +
theme(axis.text.y = element_text(size = 8)) +
facet_wrap(~ bioma, scales = "free") +
labs(x = "Ano")
# salvar
ggsave("imagens/cap05/ma_esforco_acumulado1.jpg",
plot = last_plot(),
device =  "jpeg",
scale=1.5,
width = 210,
height = 70,
units = "mm",
dpi = 120)
# Carregar bibliotecas
library(ggplot2)
library(dplyr)
library(scales)
library(tools)
# Função auxiliar para ajustar o título
ajustar_titulo <- function(titulo) {
palavras <- strsplit(titulo, " ")[[1]]
# Palavras que necessitam de correção de acentuação
correcoes <- list(
"leste" = "Região climática Leste Amazônica", "sudoeste" = "Região climática Sudoeste Amazônica", "central" = "Região climática Central Amazônica",
"norte" = "Região climática Norte Amazônica", "sudeste" = "Região climática Sudeste Amazônica"
)
palavras <- sapply(palavras, function(palavra) {
# Aplicar regras específicas para certas palavras
if (tolower(palavra) %in% c("esec", "flona", "rebio", "resex", "parna")) {
return(toupper(palavra))
} else if (tolower(palavra) %in% c("de", "da", "do", "dos", "das")) {
return(tolower(palavra))
} else {
# Corrigir acentuação, se necessário
palavra_corrigida <- tolower(palavra)
if (palavra_corrigida %in% names(correcoes)) {
return(correcoes[[palavra_corrigida]])
} else {
return(tools::toTitleCase(palavra))
}
}
})
return(paste(palavras, collapse = " "))
}
# Função para gerar o gráfico para cada unidade de conservação
gerar_grafico_por_regiao <- function(dados, nome_regiao) {
# Preparar o título com as novas regras
titulo <- gsub("_", " ", nome_regiao)
titulo <- ajustar_titulo(titulo)  # Utilizando a função de ajuste de título aqui
# Filtrar os dados para a unidade de conservação atual
dados_regiao <- subset(dados, regiao == nome_regiao)
dados_regiao <- dados_regiao[!is.na(dados_regiao$tribo), ] #tirar os dados 'NA' que estão na tribo
# Calcular o total de indivíduos por ano para a região atual
total_individuos_por_ano <- dados_regiao %>%
group_by(ano) %>%
summarise(total = sum(soma_individuos), .groups = 'drop')
# Agregar dados por ano e tribo
dados_agregados <- dados_regiao %>%
group_by(ano, tribo) %>%
summarize(frequencia = sum(soma_individuos), .groups = 'drop')
# Calcular totais e proporções
total_por_ano <- dados_agregados %>%
group_by(ano) %>%
summarize(total = sum(frequencia), .groups = 'drop')
dados_agregados <- left_join(dados_agregados, total_por_ano, by = "ano") %>%
mutate(proporcao = frequencia / total * 100)
# Ajustar proporções
dados_agregados <- dados_agregados %>%
group_by(ano) %>%
mutate(diferenca = 100 - sum(proporcao),
proporcao_ajustada = ifelse(proporcao == max(proporcao), proporcao + diferenca, proporcao)) %>%
ungroup() %>%
dplyr::select(-diferenca, -proporcao) %>%
rename(proporcao = proporcao_ajustada)
# Ordem específica das tribos
ordem_tribos <- c(
"Brassolini", "Morphini", "Haeterini",
"Satyrini", "Coeini", "Epiphilini",
"Epicaliini", "Anaeini", "Melanitini",
"Preponini", "Callicorini", "Biblidini",
"Ageroniini"
)
# Cores correspondentes às tribos - BLINDSAFE colors (3 categorias de verde, 7 categorias de cinza e 3 categorias de marrom)
cores_tribos <- c(
"Brassolini" = "#35978f", "Morphini" = "#80cdc1", "Haeterini" = "#c7eae5",
"Satyrini" = "gray95", "Coeini" = "gray90", "Epiphilini" = "gray85",
"Epicaliini" = "gray80", "Anaeini" = "gray75", "Melanitini" = "gray70",
"Preponini" = "gray65", "Callicorini" = "#f6e8c3", "Biblidini" = "#dfc27d",
"Ageroniini" = "#bf812d"
)
# Ajustar a ordem e as cores das tribos com base nas tribos presentes
cores_tribos <- cores_tribos[ordem_tribos]
# Assegurar que a coluna 'tribo' respeite a ordem definida
dados_agregados$tribo <- factor(dados_agregados$tribo, levels = ordem_tribos)
# Criar um data frame com a frequência agregada por tribo
frequencias_por_tribo_ano <- aggregate(frequencia ~ tribo, dados_agregados, sum)
# Criar uma função para determinar se um asterisco deve ser adicionado ao nome da tribo
adicionar_asterisco <- function(nome_tribo) {
# Verificar se existe alguma frequência igual a zero para essa tribo em qualquer ano
if (any(frequencias_por_tribo_ano$tribo == nome_tribo & frequencias_por_tribo_ano$frequencia == 0)) {
return(paste0(nome_tribo, "*"))
} else {
return(nome_tribo)
}
}
# Aplicar a função a cada tribo para criar o vetor de rótulos
labels_tribos <- sapply(ordem_tribos, adicionar_asterisco)
# Construir o gráfico
gg <- ggplot(dados_agregados) +
geom_bar(aes(x = ano, y = proporcao, fill = tribo), stat = "identity", position = position_stack(reverse = FALSE)) +
geom_text(data = total_individuos_por_ano, aes(x = ano, y = 0, label = paste0("(n = ", total, ")")), vjust = 1.5, size = 4) +
scale_y_continuous(labels = percent_format(scale = 1), limits = c(0, 100)) +
scale_x_discrete(expand = c(0, 0)) +
scale_fill_manual(values = cores_tribos,
labels = labels_tribos,
breaks = ordem_tribos) +
labs(title = titulo,
x = "Ano",
y = "Proporção relativa de ocorrência (%)",
fill = "Tribo") +
theme_minimal() +
theme(legend.position = "right",
legend.title = element_text(size = 18),
legend.text = element_text(size = 15),
plot.title = element_text(hjust = 0.5, size = 20),
plot.subtitle = element_text(hjust = 0.5, size = 18),
axis.text = element_text(size = 16),
axis.title = element_text(size = 16),
axis.line = element_line(colour = "gray40")) +
guides(fill = guide_legend(title = "Tribos", reverse = FALSE))
# Exibir o gráfico
print(gg)
# Salvar o gráfico em PDF
nome_arquivo <- paste0(gsub(" ", "_", tolower(titulo)), "_tribos-ano.png")
ggsave(filename = nome_arquivo,
plot = gg,
device = "png", #pode ser tiff,pdf, jpeg...
path = "/imagnes/cap04/",  # atualize com o caminho correto
dpi = 300,
width = 10, height = 8, units = "in")
}
# Palavras que necessitam de correção de acentuação
correcoes <- list(
"leste" = "Região climática Leste Amazônica", "sudoeste" = "Região climática Sudoeste Amazônica", "central" = "Região climática Central Amazônica",
"norte" = "Região climática Norte Amazônica", "sudeste" = "Região climática Sudeste Amazônica"
)
palavras <- sapply(palavras, function(palavra) {
# Aplicar regras específicas para certas palavras
if (tolower(palavra) %in% c("esec", "flona", "rebio", "resex", "parna")) {
return(toupper(palavra))
} else if (tolower(palavra) %in% c("de", "da", "do", "dos", "das")) {
return(tolower(palavra))
} else {
# Corrigir acentuação, se necessário
palavra_corrigida <- tolower(palavra)
if (palavra_corrigida %in% names(correcoes)) {
return(correcoes[[palavra_corrigida]])
} else {
return(tools::toTitleCase(palavra))
}
}
})
ajustar_titulo <- function(titulo) {
palavras <- strsplit(titulo, " ")[[1]]
# Palavras que necessitam de correção de acentuação
correcoes <- list(
"leste" = "Região climática Leste Amazônica", "sudoeste" = "Região climática Sudoeste Amazônica", "central" = "Região climática Central Amazônica",
"norte" = "Região climática Norte Amazônica", "sudeste" = "Região climática Sudeste Amazônica"
)
palavras <- sapply(palavras, function(palavra) {
# Aplicar regras específicas para certas palavras
if (tolower(palavra) %in% c("esec", "flona", "rebio", "resex", "parna")) {
return(toupper(palavra))
} else if (tolower(palavra) %in% c("de", "da", "do", "dos", "das")) {
return(tolower(palavra))
} else {
# Corrigir acentuação, se necessário
palavra_corrigida <- tolower(palavra)
if (palavra_corrigida %in% names(correcoes)) {
return(correcoes[[palavra_corrigida]])
} else {
return(tools::toTitleCase(palavra))
}
}
})
return(paste(palavras, collapse = " "))
}
# Função para gerar o gráfico para cada unidade de conservação
gerar_grafico_por_regiao <- function(dados, nome_regiao) {
# Preparar o título com as novas regras
titulo <- gsub("_", " ", nome_regiao)
titulo <- ajustar_titulo(titulo)  # Utilizando a função de ajuste de título aqui
# Filtrar os dados para a unidade de conservação atual
dados_regiao <- subset(dados, regiao == nome_regiao)
dados_regiao <- dados_regiao[!is.na(dados_regiao$tribo), ] #tirar os dados 'NA' que estão na tribo
# Calcular o total de indivíduos por ano para a região atual
total_individuos_por_ano <- dados_regiao %>%
group_by(ano) %>%
summarise(total = sum(soma_individuos), .groups = 'drop')
# Agregar dados por ano e tribo
dados_agregados <- dados_regiao %>%
group_by(ano, tribo) %>%
summarize(frequencia = sum(soma_individuos), .groups = 'drop')
# Calcular totais e proporções
total_por_ano <- dados_agregados %>%
group_by(ano) %>%
summarize(total = sum(frequencia), .groups = 'drop')
dados_agregados <- left_join(dados_agregados, total_por_ano, by = "ano") %>%
mutate(proporcao = frequencia / total * 100)
# Ajustar proporções
dados_agregados <- dados_agregados %>%
group_by(ano) %>%
mutate(diferenca = 100 - sum(proporcao),
proporcao_ajustada = ifelse(proporcao == max(proporcao), proporcao + diferenca, proporcao)) %>%
ungroup() %>%
dplyr::select(-diferenca, -proporcao) %>%
rename(proporcao = proporcao_ajustada)
# Ordem específica das tribos
ordem_tribos <- c(
"Brassolini", "Morphini", "Haeterini",
"Satyrini", "Coeini", "Epiphilini",
"Epicaliini", "Anaeini", "Melanitini",
"Preponini", "Callicorini", "Biblidini",
"Ageroniini"
)
# Cores correspondentes às tribos - BLINDSAFE colors (3 categorias de verde, 7 categorias de cinza e 3 categorias de marrom)
cores_tribos <- c(
"Brassolini" = "#35978f", "Morphini" = "#80cdc1", "Haeterini" = "#c7eae5",
"Satyrini" = "gray95", "Coeini" = "gray90", "Epiphilini" = "gray85",
"Epicaliini" = "gray80", "Anaeini" = "gray75", "Melanitini" = "gray70",
"Preponini" = "gray65", "Callicorini" = "#f6e8c3", "Biblidini" = "#dfc27d",
"Ageroniini" = "#bf812d"
)
# Ajustar a ordem e as cores das tribos com base nas tribos presentes
cores_tribos <- cores_tribos[ordem_tribos]
# Assegurar que a coluna 'tribo' respeite a ordem definida
dados_agregados$tribo <- factor(dados_agregados$tribo, levels = ordem_tribos)
# Criar um data frame com a frequência agregada por tribo
frequencias_por_tribo_ano <- aggregate(frequencia ~ tribo, dados_agregados, sum)
# Criar uma função para determinar se um asterisco deve ser adicionado ao nome da tribo
adicionar_asterisco <- function(nome_tribo) {
# Verificar se existe alguma frequência igual a zero para essa tribo em qualquer ano
if (any(frequencias_por_tribo_ano$tribo == nome_tribo & frequencias_por_tribo_ano$frequencia == 0)) {
return(paste0(nome_tribo, "*"))
} else {
return(nome_tribo)
}
}
# Aplicar a função a cada tribo para criar o vetor de rótulos
labels_tribos <- sapply(ordem_tribos, adicionar_asterisco)
# Construir o gráfico
gg <- ggplot(dados_agregados) +
geom_bar(aes(x = ano, y = proporcao, fill = tribo), stat = "identity", position = position_stack(reverse = FALSE)) +
geom_text(data = total_individuos_por_ano, aes(x = ano, y = 0, label = paste0("(n = ", total, ")")), vjust = 1.5, size = 4) +
scale_y_continuous(labels = percent_format(scale = 1), limits = c(0, 100)) +
scale_x_discrete(expand = c(0, 0)) +
scale_fill_manual(values = cores_tribos,
labels = labels_tribos,
breaks = ordem_tribos) +
labs(title = titulo,
x = "Ano",
y = "Proporção relativa de ocorrência (%)",
fill = "Tribo") +
theme_minimal() +
theme(legend.position = "right",
legend.title = element_text(size = 18),
legend.text = element_text(size = 15),
plot.title = element_text(hjust = 0.5, size = 20),
plot.subtitle = element_text(hjust = 0.5, size = 18),
axis.text = element_text(size = 16),
axis.title = element_text(size = 16),
axis.line = element_line(colour = "gray40")) +
guides(fill = guide_legend(title = "Tribos", reverse = FALSE))
# Exibir o gráfico
print(gg)
# Salvar o gráfico em PDF
nome_arquivo <- paste0(gsub(" ", "_", tolower(titulo)), "_tribos-ano.png")
ggsave(filename = nome_arquivo,
plot = gg,
device = "png", #pode ser tiff,pdf, jpeg...
path = "/imagnes/cap04/",  # atualize com o caminho correto
dpi = 300,
width = 10, height = 8, units = "in")
}
# Carregar e preparar os dados
resultado_final<-read.csv("resultado_final.csv", header=T)
