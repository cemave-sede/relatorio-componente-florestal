# Salvar a imagem usando ggsave()
ggsave(filename = "CE.png",  # Escolha um nome adequado para o arquivo
plot = graficos[[1]],  # Especifique qual gráfico da lista deseja salvar
device = "png",  # Pode ser "jpeg", "tiff", etc.
path = "/imagens/cap04",  # Especifique o diretório onde você deseja salvar o gráfico
dpi = 300,  # Define a resolução (DPI)
width = 10, height = 8, units = "in")  # Define o tamanho da imagem
#| label: fig-regiao-cerrado
#| echo: false
#| message: false
#| warning: false
#| cache: true
#| fig.pos: 'H'
#| out.width: '70%'
#| fig-cap: "Abundância relativa de tribos de borboletas frugívoras de 2014 a 2022 no Cerrado. Não houve amostragem em 2020. Os números acima das barras indicam indivíduos registrados e os números entre parêntesis abaixo das barras se referem ao número de estações amostrais inspecionadas naquele ano. O asterisco indica tribo ausente na amostragem."
# Gráficos de dados Borboletas - Protocolo básico - Cerrado -
### Tribos com asterisco estão ausentes nos dados
## Script: Isabela Freitas Oliveira
library(ggplot2)
library(dplyr)
library(scales)
library(tools)
# Função auxiliar para ajustar o título
ajustar_titulo <- function(titulo) {
palavras <- strsplit(titulo, " ")[[1]]
# Palavras que necessitam de correção de acentuação
#correcoes <- list(
# "Cerrado" = "Cerrado")
}
# Função para gerar o gráfico para cada unidade de conservação
gerar_grafico_por_bioma <- function(dados, nome_bioma) {
# Preparar o título com as novas regras
titulo <- gsub("_", " ", nome_bioma)
titulo <- ajustar_titulo(titulo)  # Utilizando a função de ajuste de título aqui
# Filtrar os dados para a unidade de conservação atual
dados_bioma <- subset(dados, bioma == nome_bioma & bioma == "Cerrado")
dados_bioma <- dados_bioma[!is.na(dados_bioma$tribo), ] #tirar os dados 'NA' que estão na tribo
# Calcular o total de indivíduos por ano para a região atual
total_individuos_por_ano <- dados_bioma %>%
group_by(ano) %>%
summarise(total = sum(soma_individuos), .groups = 'drop')
# Agregar dados por ano e tribo
dados_agregados <- dados_bioma %>%
group_by(ano, tribo) %>%
summarize(frequencia = sum(soma_individuos), .groups = 'drop')
# Calcular totais e proporções
total_por_ano <- dados_agregados %>%
group_by(ano) %>%
summarize(total = sum(frequencia), .groups = 'drop')
dados_agregados <- left_join(dados_agregados, total_por_ano, by = "ano") %>%
mutate(proporcao = frequencia / total * 100)
# Ajustar proporções
dados_agregados <- dados_agregados %>%
group_by(ano) %>%
mutate(diferenca = 100 - sum(proporcao),
proporcao_ajustada = ifelse(proporcao == max(proporcao), proporcao + diferenca, proporcao)) %>%
ungroup() %>%
dplyr::select(-diferenca, -proporcao) %>%
rename(proporcao = proporcao_ajustada)
# Ordem específica das tribos
ordem_tribos <- c(
"Brassolini", "Morphini", "Haeterini",
"Preponini", "Melanitini", "Anaeini",
"Epicaliini","Epiphilini", "Coeini",
"Satyrini",
"Callicorini", "Biblidini","Ageroniini"
)
# Cores correspondentes às tribos - BLINDSAFE colors (3 categorias de verde, 7 categorias de cinza e 3 categorias de marrom)
cores_tribos <- c(
"Brassolini" = "#35978f", "Morphini" = "#80cdc1", "Haeterini" = "#c7eae5",
"Preponini" = "gray65", "Melanitini" = "gray70", "Anaeini" = "gray75",
"Epicaliini" = "gray80", "Epiphilini" = "gray85", "Coeini" = "gray90",
"Satyrini" = "gray95",
"Callicorini" = "#f6e8c3", "Biblidini" = "#dfc27d","Ageroniini" = "#bf812d"
)
# Ajustar a ordem e as cores das tribos com base nas tribos presentes
cores_tribos <- cores_tribos[ordem_tribos]
# Assegurar que a coluna 'tribo_clean' respeite a ordem definida
dados_agregados$tribo <- factor(dados_agregados$tribo, levels = ordem_tribos)
# Criar um data frame com a frequência agregada por tribo
frequencias_por_tribo_ano <- aggregate(frequencia ~ tribo, dados_agregados, sum)
# Criar uma função para determinar se um asterisco deve ser adicionado ao nome da tribo
adicionar_asterisco <- function(nome_tribo) {
# Verificar se existe alguma frequência igual a zero para essa tribo em qualquer ano
if (any(frequencias_por_tribo_ano$tribo == nome_tribo & frequencias_por_tribo_ano$frequencia == 0)) {
return(paste0(nome_tribo, "*"))
} else {
return(nome_tribo)
}
}
# Aplicar a função a cada tribo para criar o vetor de rótulos
labels_tribos <- sapply(ordem_tribos, adicionar_asterisco)
# Criar um data frame com o número único de 'uc_ea' por ano
numero_ea_por_ano <- dados_bioma %>%
distinct(ano, uc_ea) %>%
group_by(ano) %>%
summarize(num_ea = n_distinct(uc_ea))
# Construir o gráfico
gg <- ggplot() +
geom_bar(data = dados_agregados, aes(x = ano, y = proporcao, fill = tribo), stat = "identity", position = position_stack(reverse = FALSE)) +
geom_text(data = total_individuos_por_ano, aes(x = ano, y = 100, label = total), vjust = -0.5, size = 3, hjust = 0.5)+
geom_text(data = numero_ea_por_ano, aes(x = ano, y = 0, label = paste0("(", num_ea, ")")), vjust = 1.5, size = 3, hjust = 0.5, color = "gray40") +
scale_y_continuous(labels = scales::number_format(scale = 1, accuracy = 1), limits = c(0, 100))+
scale_x_discrete(expand = c(0, 0)) +
scale_fill_manual(values = cores_tribos,
labels = labels_tribos,
breaks = ordem_tribos) +
labs(title = titulo,
x = "",
y = "Frequência relativa de ocorrência (%)",
fill = "Tribo") +
theme_minimal() +
legend.title = element_text(size = 12),
#| label: fig-regiao-cerrado
#| echo: false
#| message: false
#| warning: false
#| cache: true
#| fig.pos: 'H'
#| out.width: '70%'
#| fig-cap: "Abundância relativa de tribos de borboletas frugívoras de 2014 a 2022 no Cerrado. Não houve amostragem em 2020. Os números acima das barras indicam indivíduos registrados e os números entre parêntesis abaixo das barras se referem ao número de estações amostrais inspecionadas naquele ano. O asterisco indica tribo ausente na amostragem."
# Gráficos de dados Borboletas - Protocolo básico - Cerrado -
### Tribos com asterisco estão ausentes nos dados
## Script: Isabela Freitas Oliveira
library(ggplot2)
library(dplyr)
library(scales)
library(tools)
# Função auxiliar para ajustar o título
ajustar_titulo <- function(titulo) {
palavras <- strsplit(titulo, " ")[[1]]
# Palavras que necessitam de correção de acentuação
#correcoes <- list(
# "Cerrado" = "Cerrado")
}
# Função para gerar o gráfico para cada unidade de conservação
gerar_grafico_por_bioma <- function(dados, nome_bioma) {
# Preparar o título com as novas regras
titulo <- gsub("_", " ", nome_bioma)
titulo <- ajustar_titulo(titulo)  # Utilizando a função de ajuste de título aqui
# Filtrar os dados para a unidade de conservação atual
dados_bioma <- subset(dados, bioma == nome_bioma & bioma == "Cerrado")
dados_bioma <- dados_bioma[!is.na(dados_bioma$tribo), ] #tirar os dados 'NA' que estão na tribo
# Calcular o total de indivíduos por ano para a região atual
total_individuos_por_ano <- dados_bioma %>%
group_by(ano) %>%
summarise(total = sum(soma_individuos), .groups = 'drop')
# Agregar dados por ano e tribo
dados_agregados <- dados_bioma %>%
group_by(ano, tribo) %>%
summarize(frequencia = sum(soma_individuos), .groups = 'drop')
# Calcular totais e proporções
total_por_ano <- dados_agregados %>%
group_by(ano) %>%
summarize(total = sum(frequencia), .groups = 'drop')
dados_agregados <- left_join(dados_agregados, total_por_ano, by = "ano") %>%
mutate(proporcao = frequencia / total * 100)
# Ajustar proporções
dados_agregados <- dados_agregados %>%
group_by(ano) %>%
mutate(diferenca = 100 - sum(proporcao),
proporcao_ajustada = ifelse(proporcao == max(proporcao), proporcao + diferenca, proporcao)) %>%
ungroup() %>%
dplyr::select(-diferenca, -proporcao) %>%
rename(proporcao = proporcao_ajustada)
# Ordem específica das tribos
ordem_tribos <- c(
"Brassolini", "Morphini", "Haeterini",
"Preponini", "Melanitini", "Anaeini",
"Epicaliini","Epiphilini", "Coeini",
"Satyrini",
"Callicorini", "Biblidini","Ageroniini"
)
# Cores correspondentes às tribos - BLINDSAFE colors (3 categorias de verde, 7 categorias de cinza e 3 categorias de marrom)
cores_tribos <- c(
"Brassolini" = "#35978f", "Morphini" = "#80cdc1", "Haeterini" = "#c7eae5",
"Preponini" = "gray65", "Melanitini" = "gray70", "Anaeini" = "gray75",
"Epicaliini" = "gray80", "Epiphilini" = "gray85", "Coeini" = "gray90",
"Satyrini" = "gray95",
"Callicorini" = "#f6e8c3", "Biblidini" = "#dfc27d","Ageroniini" = "#bf812d"
)
# Ajustar a ordem e as cores das tribos com base nas tribos presentes
cores_tribos <- cores_tribos[ordem_tribos]
# Assegurar que a coluna 'tribo_clean' respeite a ordem definida
dados_agregados$tribo <- factor(dados_agregados$tribo, levels = ordem_tribos)
# Criar um data frame com a frequência agregada por tribo
frequencias_por_tribo_ano <- aggregate(frequencia ~ tribo, dados_agregados, sum)
# Criar uma função para determinar se um asterisco deve ser adicionado ao nome da tribo
adicionar_asterisco <- function(nome_tribo) {
# Verificar se existe alguma frequência igual a zero para essa tribo em qualquer ano
if (any(frequencias_por_tribo_ano$tribo == nome_tribo & frequencias_por_tribo_ano$frequencia == 0)) {
return(paste0(nome_tribo, "*"))
} else {
return(nome_tribo)
}
}
# Aplicar a função a cada tribo para criar o vetor de rótulos
labels_tribos <- sapply(ordem_tribos, adicionar_asterisco)
# Criar um data frame com o número único de 'uc_ea' por ano
numero_ea_por_ano <- dados_bioma %>%
distinct(ano, uc_ea) %>%
group_by(ano) %>%
summarize(num_ea = n_distinct(uc_ea))
# Construir o gráfico
gg <- ggplot() +
geom_bar(data = dados_agregados, aes(x = ano, y = proporcao, fill = tribo), stat = "identity", position = position_stack(reverse = FALSE)) +
geom_text(data = total_individuos_por_ano, aes(x = ano, y = 100, label = total), vjust = -0.5, size = 3, hjust = 0.5)+
geom_text(data = numero_ea_por_ano, aes(x = ano, y = 0, label = paste0("(", num_ea, ")")), vjust = 1.5, size = 3, hjust = 0.5, color = "gray40") +
scale_y_continuous(labels = scales::number_format(scale = 1, accuracy = 1), limits = c(0, 100))+
scale_x_discrete(expand = c(0, 0)) +
scale_fill_manual(values = cores_tribos,
labels = labels_tribos,
breaks = ordem_tribos) +
labs(title = titulo,
x = "",
y = "Frequência relativa de ocorrência (%)",
fill = "Tribo") +
theme_minimal() +
theme(legend.position = "right",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
plot.title = element_text(hjust = 0.5, size = 16),
plot.subtitle = element_text(hjust = 0.5, size = 14),
axis.ticks.y = element_line(color = "black"),
axis.text = element_text(size = 10),
axis.title = element_text(size = 10),
axis.line = element_line(colour = "gray40"),
axis.line.x = element_blank()) +
guides(fill = guide_legend(title = "Tribos", reverse = FALSE))
# Exibir o gráfico
print(gg)
# Retorna o gráfico para que possa ser salvo externamente
return(gg)
}
# Carregar e preparar os dados
resultado_final <- read.csv("dados/borboletas/resultado_final.csv", header = TRUE)
resultado_final$ano <- factor(resultado_final$ano)
resultado_final$tribo <- gsub("\\*", "", resultado_final$tribo)
# Obter todas as UC's do bioma Cerrado
biomas <- unique(resultado_final$bioma[resultado_final$bioma == "Cerrado"])
# Aplicar a função
graficos <- lapply(biomas, function(bioma) gerar_grafico_por_bioma(resultado_final, bioma))
# Salvar a imagem usando ggsave()
ggsave(filename = "CE.png",  # Escolha um nome adequado para o arquivo
plot = graficos[[1]],  # Especifique qual gráfico da lista deseja salvar
device = "png",  # Pode ser "jpeg", "tiff", etc.
path = "/imagens/cap04",  # Especifique o diretório onde você deseja salvar o gráfico
dpi = 300,  # Define a resolução (DPI)
width = 10, height = 8, units = "in")  # Define o tamanho da imagem
#| label: fig-regiao-mata-atlantica
#| echo: false
#| message: false
#| warning: false
#| cache: true
#| fig.pos: 'H'
#| out.width: '70%'
#| fig-cap: "Abundância relativa de tribos de borboletas frugívoras de 2015 a 2022 na Mata Atlântica. Não houve amostragem em 2020. Os números acima das barras indicam indivíduos registrados e os números entre parêntesis abaixo das barras se referem ao número de estações amostrais inspecionadas naquele ano. O asterisco indica tribo ausente na amostragem."
##### Gráficos de dados Borboletas - Protocolo básico - Mata Atlantica
### Tribos com asterisco estão ausentes no gráfico
## Script: Isabela Freitas Oliveira
# Carregar bibliotecas
library(ggplot2)
library(dplyr)
library(scales)
library(tools)
# Função auxiliar para ajustar o título
ajustar_titulo <- function(titulo) {
palavras <- strsplit(titulo, " ")[[1]]
# Palavras que necessitam de correção de acentuação
correcoes <- list(
"Mata_Atlantica" = "Mata Atlântica")
}
# Função para gerar o gráfico para cada unidade de conservação
gerar_grafico_por_bioma <- function(dados, nome_bioma) {
# Preparar o título com as novas regras
titulo <- gsub("_", " ", nome_bioma)
titulo <- ajustar_titulo(titulo)  # Utilizando a função de ajuste de título aqui
# Filtrar os dados para a unidade de conservação atual
dados_bioma <- subset(dados, bioma == nome_bioma & bioma == "Mata_Atlantica")
dados_bioma <- dados_bioma[!is.na(dados_bioma$tribo), ] #tirar os dados 'NA' que estão na tribo
# Calcular o total de indivíduos por ano para a região atual
total_individuos_por_ano <- dados_bioma %>%
group_by(ano) %>%
summarise(total = sum(soma_individuos), .groups = 'drop')
# Agregar dados por ano e tribo
dados_agregados <- dados_bioma %>%
group_by(ano, tribo) %>%
summarize(frequencia = sum(soma_individuos), .groups = 'drop')
# Calcular totais e proporções
total_por_ano <- dados_agregados %>%
group_by(ano) %>%
summarize(total = sum(frequencia), .groups = 'drop')
dados_agregados <- left_join(dados_agregados, total_por_ano, by = "ano") %>%
mutate(proporcao = frequencia / total * 100)
# Ajustar proporções
dados_agregados <- dados_agregados %>%
group_by(ano) %>%
mutate(diferenca = 100 - sum(proporcao),
proporcao_ajustada = ifelse(proporcao == max(proporcao), proporcao + diferenca, proporcao)) %>%
ungroup() %>%
dplyr::select(-diferenca, -proporcao) %>%
rename(proporcao = proporcao_ajustada)
# Ordem específica das tribos
ordem_tribos <- c(
"Brassolini", "Morphini", "Haeterini",
"Preponini", "Melanitini", "Anaeini",
"Epicaliini","Epiphilini", "Coeini",
"Satyrini",
"Callicorini", "Biblidini","Ageroniini"
)
# Cores correspondentes às tribos - BLINDSAFE colors (3 categorias de verde, 7 categorias de cinza e 3 categorias de marrom)
cores_tribos <- c(
"Brassolini" = "#35978f", "Morphini" = "#80cdc1", "Haeterini" = "#c7eae5",
"Preponini" = "gray65", "Melanitini" = "gray70", "Anaeini" = "gray75",
"Epicaliini" = "gray80", "Epiphilini" = "gray85", "Coeini" = "gray90",
"Satyrini" = "gray95",
"Callicorini" = "#f6e8c3", "Biblidini" = "#dfc27d","Ageroniini" = "#bf812d"
)
# Ajustar a ordem e as cores das tribos com base nas tribos presentes
cores_tribos <- cores_tribos[ordem_tribos]
# Assegurar que a coluna 'tribo_clean' respeite a ordem definida
dados_agregados$tribo <- factor(dados_agregados$tribo, levels = ordem_tribos)
# Criar um data frame com a frequência agregada por tribo
frequencias_por_tribo_ano <- aggregate(frequencia ~ tribo, dados_agregados, sum)
# Criar uma função para determinar se um asterisco deve ser adicionado ao nome da tribo
adicionar_asterisco <- function(nome_tribo) {
# Verificar se existe alguma frequência igual a zero para essa tribo em qualquer ano
if (any(frequencias_por_tribo_ano$tribo == nome_tribo & frequencias_por_tribo_ano$frequencia == 0)) {
return(paste0(nome_tribo, "*"))
} else {
return(nome_tribo)
}
}
# Aplicar a função a cada tribo para criar o vetor de rótulos
labels_tribos <- sapply(ordem_tribos, adicionar_asterisco)
# Criar um data frame com o número único de 'uc_ea' por ano
numero_ea_por_ano <- dados_bioma %>%
distinct(ano, uc_ea) %>%
group_by(ano) %>%
summarize(num_ea = n_distinct(uc_ea))
# Construir o gráfico
gg <- ggplot() +
geom_bar(data = dados_agregados, aes(x = ano, y = proporcao, fill = tribo), stat = "identity", position = position_stack(reverse = FALSE)) +
geom_text(data = total_individuos_por_ano, aes(x = ano, y = 100, label = total), vjust = -0.5, size = 3, hjust = 0.5)+
geom_text(data = numero_ea_por_ano, aes(x = ano, y = 0, label = paste0("(", num_ea, ")")), vjust = 1.5, size = 3, hjust = 0.5, color = "gray40") +
scale_y_continuous(labels = scales::number_format(scale = 1, accuracy = 1), limits = c(0, 100))+
scale_x_discrete(expand = c(0, 0)) +
scale_fill_manual(values = cores_tribos,
labels = labels_tribos,
breaks = ordem_tribos) +
labs(title = titulo,
x = "Ano",
y = "Frequência relativa de ocorrência (%)",
fill = "Tribo") +
theme_minimal() +
theme(legend.position = "right",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
plot.title = element_text(hjust = 0.5, size = 16),
plot.subtitle = element_text(hjust = 0.5, size = 14),
axis.ticks.y = element_line(color = "black"),
axis.text = element_text(size = 10),
axis.title = element_text(size = 10),
axis.line = element_line(colour = "gray40"),
axis.line.x = element_blank()) +
guides(fill = guide_legend(title = "Tribos", reverse = FALSE))
# Exibir o gráfico
print(gg)
}
# Carregar e preparar os dados
resultado_final <- read.csv("dados/borboletas/resultado_final.csv", header = TRUE)
resultado_final$ano <- factor(resultado_final$ano)
resultado_final$tribo <- gsub("\\*", "", resultado_final$tribo)
# Obter todas as UC's do bioma Mata Atlântica
biomas <- unique(resultado_final$bioma[resultado_final$bioma == "Mata_Atlantica"])
# Aplicar a função
graficos <- lapply(biomas, function(bioma) gerar_grafico_por_bioma(resultado_final, bioma))
# Salvar a imagem usando ggsave()
ggsave(filename = "MA.png",  # Escolha um nome adequado para o arquivo
plot = graficos[[1]],  # Especifique qual gráfico da lista deseja salvar
device = "png",  # Pode ser "jpeg", "tiff", etc.
path = "/imagens/cap04",  # Especifique o diretório onde você deseja salvar o gráfico
dpi = 300,  # Define a resolução (DPI)
width = 10, height = 8, units = "in")  # Define o tamanho da imagem
knitr::opts_chunk$set(echo = TRUE)
#| label: tbl-lista-aves
#| echo: false
#| message: false
#| warning: false
#| cache: true
#| fig.pos: 'H'
#| out.width: '100%'
#| tab-cap: "Táxons (gêneros e espécies) de aves registrados nas unidades de conservação amostradas no período de 2014 a 2022."
tabela_aves <- read.csv2("dados/tabelas/apendice/tabela_apendice_aves_nome-comum.csv", encoding="UTF-8")
#| label: tbl-lista-aves
#| echo: false
#| message: false
#| warning: false
#| cache: true
#| fig.pos: 'H'
#| out.width: '100%'
#| tab-cap: "Táxons (gêneros e espécies) de aves registrados nas unidades de conservação amostradas no período de 2014 a 2022."
tabela_aves <- read.csv2("dados/tabelas/apendice/tabela_apendice_aves_nome_comum.csv", encoding="UTF-8")
tab_aves <- kbl(tabela_aves,
#"pipe",
booktabs = TRUE,
longtable = TRUE,
# caption = " ",
col.names = c("Ordem", "Família", "Táxon", "Categoria"), align = c("l", "l", "l", "c")) %>%
column_spec(3, italic = TRUE) %>%
kable_styling(full_width = F, bootstrap_options = c("striped", "hover", "condensed", "responsive"), latex_options = c("repeat_header"), repeat_header_text = "\\textit{(continuação)}")
#| label: tbl-lista-aves
#| echo: false
#| message: false
#| warning: false
#| cache: true
#| fig.pos: 'H'
#| out.width: '100%'
#| tab-cap: "Táxons (gêneros e espécies) de aves registrados nas unidades de conservação amostradas no período de 2014 a 2022."
tabela_aves <- read.csv2("dados/tabelas/apendice/tabela_apendice_aves_nome_comum.csv", encoding="UTF-8")
tab_aves <- kbl(tabela_aves,
#"pipe",
booktabs = TRUE,
longtable = TRUE,
# caption = " ",
col.names = c("Ordem", "Família", "Táxon", "Categoria"), align = c("l", "l", "l", "c")) %>%
column_spec(3, italic = TRUE) %>%
kable_styling(full_width = F, bootstrap_options = c("striped", "hover", "condensed", "responsive"), latex_options = c("repeat_header"), repeat_header_text = "\\textit{(continuação)}")
library(tidyverse)
library(data.table)
library(descr)
library(RColorBrewer)
library(kableExtra)
library(knitr)
library(DT)
library(plotly)
library(ggthemes)
library(forcats)
library(leaflet)
library(sf)
library(rgdal)
library(treemapify)
library(reshape2)
library(randomcoloR)
library(survminer)
library(renv)
library(htmlTable)
#| label: tbl-lista-aves
#| echo: false
#| message: false
#| warning: false
#| cache: true
#| fig.pos: 'H'
#| out.width: '100%'
#| tab-cap: "Táxons (gêneros e espécies) de aves registrados nas unidades de conservação amostradas no período de 2014 a 2022."
tabela_aves <- read.csv2("dados/tabelas/apendice/tabela_apendice_aves_nome_comum.csv", encoding="UTF-8")
tab_aves <- kbl(tabela_aves,
#"pipe",
booktabs = TRUE,
longtable = TRUE,
# caption = " ",
col.names = c("Ordem", "Família", "Táxon", "Categoria"), align = c("l", "l", "l", "c")) %>%
column_spec(3, italic = TRUE) %>%
kable_styling(full_width = F, bootstrap_options = c("striped", "hover", "condensed", "responsive"), latex_options = c("repeat_header"), repeat_header_text = "\\textit{(continuação)}")
#| label: tbl-lista-aves
#| echo: false
#| message: false
#| warning: false
#| cache: true
#| fig.pos: 'H'
#| out.width: '100%'
#| tab-cap: "Táxons (gêneros e espécies) de aves registrados nas unidades de conservação amostradas no período de 2014 a 2022."
tabela_aves <- read.csv2("dados/tabelas/apendice/tabela_apendice_aves_nome_comum.csv", encoding="UTF-8")
tab_aves <- kbl(tabela_aves,
#"pipe",
booktabs = TRUE,
longtable = TRUE,
# caption = " ",
col.names = c("Ordem", "Família", "Táxon", "Nome comum", "Categoria"), align = c("l", "l", "l", "l", "c")) %>%
column_spec(3, italic = TRUE) %>%
kable_styling(full_width = F, bootstrap_options = c("striped", "hover", "condensed", "responsive"), latex_options = c("repeat_header"), repeat_header_text = "\\textit{(continuação)}")
tab_aves
#----------------------------------------------
# tab_aves <- datatable(tabela_aves,
#                            #caption = 'Táxons (gêneros e espécies) de aves registrados nas unidades de conservação amostradas no período de 2014 a 2022.',
#
#                            colnames = c("Ordem", "Família", "Táxon", "Categoria"),
#
#                            extensions = 'Buttons',
#                            elementId = NULL,
#                            # extensions= "Scroller",
#                            style="bootstrap",
#                            class="stripe hover",
#                            width="100%",
#                            rownames = F,
#                            autoHideNavigation = T,
#                            escape =FALSE,
#                            #filter = "top",
#                            options=list(deferRender=TRUE,
#                                    pageLength = 5,
#                                    scrollY=300,
#                                    dom = 'Bfrtip',
#                          buttons = c('copy', 'csv', 'excel', 'pdf'))) %>%
#
# formatStyle('taxon_validado',  fontWeight = 'italic', fontStyle = 'italic', `text-align` = 'left') %>%
#
# formatStyle(columns = c("ordem."), `text-align` = 'left') %>%
# formatStyle(columns = c("familia"), `text-align` = 'left') %>%
# formatStyle(columns = c("taxon_validado"), `text-align` = 'left') %>%
# formatStyle(columns = c("categoria"), `text-align` = 'center')
#
# tab_aves
